class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        int i = click[0], j = click[1];
        if (isOutOfBound(board, i, j)) {
            return board;
        }
        if (board[i][j] == 'M') { // 找到地雷
            board[i][j] = 'X';
            return board;
        }
        if (board[i][j] != 'E') { // 已搜索：很多情况，取反简单点：>'1' && <'9' || == 'M' || == 'X'
            return board;
        }

        // 下面是为E的情况
        char minResult = countMind(board, i, j);
        board[i][j] = minResult;
        if (minResult != 'B') return board; // 规则2:只有B才会递归，如果是数字，则不递归
        for (int[] dir : dirs) {
            int row = i + dir[0];
            int col = j + dir[1];
            if (isOutOfBound(board, row, col)) {
                continue;
            }
            updateBoard(board, new int[]{row, col});
        }
        return board;
    }

    private boolean isOutOfBound(char[][] board, int i, int j) {
        return i < 0 || j < 0 || i >= board.length || j >= board[0].length;
    }

    int[][] dirs = new int[][]{{1, 0},{0, 1},{-1, 0},{0, -1},{1, 1},{-1, -1},{-1, 1},{1, -1}};
    private char countMind(char[][] board, int i, int j) {
        int minCounter = 0;
        for (int[] dir : dirs) {
            int row = i + dir[0];
            int col = j + dir[1];
            if (isOutOfBound(board, row, col)) {
                continue;
            }
            if (board[row][col] == 'M' || board[row][col] == 'X') {
                minCounter++;
            }
        }
        if (minCounter == 0) return 'B';
        else return (char) (minCounter + '0');
    }
}