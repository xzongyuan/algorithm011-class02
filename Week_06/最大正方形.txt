class Solution {
int maxLen = 0;
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0) return 0;

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] == '1') {
                    dfs(matrix,1, i , j);
                }
            }
        }
        return maxLen * maxLen;
    }

    private void dfs(char[][] matrix, int len, int i, int j) {
        if (!isAllOne(matrix, len, i, j)) {
            return;
        }
        maxLen = Math.max(len, maxLen);
        dfs(matrix, len + 1, i, j);
    }

    private boolean isAllOne(char[][] matrix, int len, int x, int y) {
        if (x + len > matrix.length || y + len > matrix[0].length) return false;

        for (int i = x; i < x + len; i++) {
            for (int j = y; j < y + len; j++) {
                if (matrix[i][j] == '0') return false;
            }
        }
        return true;
    }
}